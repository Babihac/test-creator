package components

import "fmt"

type RangeInputProps struct {
	Min       int
	Max       int
	Step      int
	Value     int
	Disabled  bool
	ReadOnly  bool
	AutoFocus bool
	Form      string
	Name      string
	Label     string
	ID        string
	Unit      string
	Model     string
}

func (p *RangeInputProps) generateSteps() []string {
	steps := make([]string, 0)

	for i := p.Min; i <= p.Max; i += p.Step {
		steps = append(steps, fmt.Sprintf("%d", i))
	}
	return steps
}

func (p *RangeInputProps) fullLabel() string {
	if p.Label == "" {
		return "Range"
	}
	return fmt.Sprintf("%s [%s]", p.Label, p.Unit)
}

func (p *RangeInputProps) get(v any) string {
	if v == nil {
		return ""
	}
	return fmt.Sprintf("%v", v)
}

templ RangeInput(p RangeInputProps) {
	<div id={ p.ID }>
		<label class="label mb-1">
			<div>
				{ p.Label }
				if p.Model != "" {
					<span>[</span>
					<span x-text={ p.Model }></span>
					<span>{ p.Unit }</span>
					<span>]</span>
				}
			</div>
		</label>
		<input
			name={ p.Name }
			type="range"
			min={ p.get(p.Min) }
			max={ p.get(p.Max) }
			class="range"
			step={ p.get(p.Step) }
			if p.Model != "" {
				x-model={ p.Model }
			}
		/>
		<div class="w-full flex justify-between text-xs px-2 mt-1">
			for _, step := range p.generateSteps() {
				<label>{ step }</label>
			}
		</div>
	</div>
}
