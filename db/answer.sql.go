// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: answer.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAnswer = `-- name: CreateAnswer :one
INSERT INTO answer (value, question_id, correct) VALUES ($1, $2, $3) RETURNING id, value, question_id, correct
`

type CreateAnswerParams struct {
	Value      string
	QuestionID pgtype.UUID
	Correct    bool
}

func (q *Queries) CreateAnswer(ctx context.Context, arg CreateAnswerParams) (Answer, error) {
	row := q.db.QueryRow(ctx, createAnswer, arg.Value, arg.QuestionID, arg.Correct)
	var i Answer
	err := row.Scan(
		&i.ID,
		&i.Value,
		&i.QuestionID,
		&i.Correct,
	)
	return i, err
}

const deleteAnswer = `-- name: DeleteAnswer :exec
DELETE FROM answer WHERE id = $1
`

func (q *Queries) DeleteAnswer(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteAnswer, id)
	return err
}

const getAnswer = `-- name: GetAnswer :one
SELECT id, value, question_id, correct from answer
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetAnswer(ctx context.Context, id pgtype.UUID) (Answer, error) {
	row := q.db.QueryRow(ctx, getAnswer, id)
	var i Answer
	err := row.Scan(
		&i.ID,
		&i.Value,
		&i.QuestionID,
		&i.Correct,
	)
	return i, err
}

const listAnswers = `-- name: ListAnswers :many
SELECT id, value, question_id, correct from answer
`

func (q *Queries) ListAnswers(ctx context.Context) ([]Answer, error) {
	rows, err := q.db.Query(ctx, listAnswers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Answer
	for rows.Next() {
		var i Answer
		if err := rows.Scan(
			&i.ID,
			&i.Value,
			&i.QuestionID,
			&i.Correct,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAnswer = `-- name: UpdateAnswer :one
UPDATE answer SET value = $1, question_id = $2, correct = $3 WHERE id = $4 RETURNING id, value, question_id, correct
`

type UpdateAnswerParams struct {
	Value      string
	QuestionID pgtype.UUID
	Correct    bool
	ID         pgtype.UUID
}

func (q *Queries) UpdateAnswer(ctx context.Context, arg UpdateAnswerParams) (Answer, error) {
	row := q.db.QueryRow(ctx, updateAnswer,
		arg.Value,
		arg.QuestionID,
		arg.Correct,
		arg.ID,
	)
	var i Answer
	err := row.Scan(
		&i.ID,
		&i.Value,
		&i.QuestionID,
		&i.Correct,
	)
	return i, err
}
