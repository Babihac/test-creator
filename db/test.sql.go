// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: test.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createTest = `-- name: CreateTest :one
INSERT INTO test (name, teacher_id, duration, max_points, date) VALUES ($1, $2, $3, $4, $5) RETURNING id, name, teacher_id, duration, max_points, date, created_at
`

type CreateTestParams struct {
	Name      string
	TeacherID pgtype.UUID
	Duration  pgtype.Interval
	MaxPoints int32
	Date      pgtype.Timestamp
}

func (q *Queries) CreateTest(ctx context.Context, arg CreateTestParams) (Test, error) {
	row := q.db.QueryRow(ctx, createTest,
		arg.Name,
		arg.TeacherID,
		arg.Duration,
		arg.MaxPoints,
		arg.Date,
	)
	var i Test
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.TeacherID,
		&i.Duration,
		&i.MaxPoints,
		&i.Date,
		&i.CreatedAt,
	)
	return i, err
}

const deleteTest = `-- name: DeleteTest :exec
DELETE FROM test WHERE id = $1
`

func (q *Queries) DeleteTest(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteTest, id)
	return err
}

const getTest = `-- name: GetTest :one
SELECT id, name, teacher_id, duration, max_points, date, created_at FROM test
where id = $1 LIMIT 1
`

func (q *Queries) GetTest(ctx context.Context, id pgtype.UUID) (Test, error) {
	row := q.db.QueryRow(ctx, getTest, id)
	var i Test
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.TeacherID,
		&i.Duration,
		&i.MaxPoints,
		&i.Date,
		&i.CreatedAt,
	)
	return i, err
}

const listTests = `-- name: ListTests :many
SELECT id, name, teacher_id, duration, max_points, date, created_at FROM test
`

func (q *Queries) ListTests(ctx context.Context) ([]Test, error) {
	rows, err := q.db.Query(ctx, listTests)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Test
	for rows.Next() {
		var i Test
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.TeacherID,
			&i.Duration,
			&i.MaxPoints,
			&i.Date,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTestsWithTeacher = `-- name: ListTestsWithTeacher :many
SELECT t.id, t.name, t.teacher_id, t.duration, t.max_points, t.date, CONCAT(u.first_name, ' ', u.last_name) as teacher_name, t.created_at
FROM "test" t
JOIN "user" u ON t.teacher_id = u.id
`

type ListTestsWithTeacherRow struct {
	ID          pgtype.UUID
	Name        string
	TeacherID   pgtype.UUID
	Duration    pgtype.Interval
	MaxPoints   int32
	Date        pgtype.Timestamp
	TeacherName interface{}
	CreatedAt   pgtype.Timestamp
}

// struct: TestWithTeacher
func (q *Queries) ListTestsWithTeacher(ctx context.Context) ([]ListTestsWithTeacherRow, error) {
	rows, err := q.db.Query(ctx, listTestsWithTeacher)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListTestsWithTeacherRow
	for rows.Next() {
		var i ListTestsWithTeacherRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.TeacherID,
			&i.Duration,
			&i.MaxPoints,
			&i.Date,
			&i.TeacherName,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTest = `-- name: UpdateTest :one
UPDATE test SET name = $1, teacher_id = $2, duration = $3, max_points = $4, date = $5 WHERE id = $6 RETURNING id, name, teacher_id, duration, max_points, date, created_at
`

type UpdateTestParams struct {
	Name      string
	TeacherID pgtype.UUID
	Duration  pgtype.Interval
	MaxPoints int32
	Date      pgtype.Timestamp
	ID        pgtype.UUID
}

func (q *Queries) UpdateTest(ctx context.Context, arg UpdateTestParams) (Test, error) {
	row := q.db.QueryRow(ctx, updateTest,
		arg.Name,
		arg.TeacherID,
		arg.Duration,
		arg.MaxPoints,
		arg.Date,
		arg.ID,
	)
	var i Test
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.TeacherID,
		&i.Duration,
		&i.MaxPoints,
		&i.Date,
		&i.CreatedAt,
	)
	return i, err
}
