// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: questions.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createQuestion = `-- name: CreateQuestion :one
INSERT INTO question (
  question_type, points, name, question_text
) VALUES ( 
  $1, $2, $3,$4
) RETURNING id, question_type, points, name, question_text, created_at
`

type CreateQuestionParams struct {
	QuestionType pgtype.UUID
	Points       int32
	Name         string
	QuestionText string
}

func (q *Queries) CreateQuestion(ctx context.Context, arg CreateQuestionParams) (Question, error) {
	row := q.db.QueryRow(ctx, createQuestion,
		arg.QuestionType,
		arg.Points,
		arg.Name,
		arg.QuestionText,
	)
	var i Question
	err := row.Scan(
		&i.ID,
		&i.QuestionType,
		&i.Points,
		&i.Name,
		&i.QuestionText,
		&i.CreatedAt,
	)
	return i, err
}

const deleteQuestion = `-- name: DeleteQuestion :exec
DELETE FROM question 
WHERE id = $1
`

func (q *Queries) DeleteQuestion(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteQuestion, id)
	return err
}

const getQuestion = `-- name: GetQuestion :one
SELECT id, question_type, points, name, question_text, created_at FROM question 
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetQuestion(ctx context.Context, id pgtype.UUID) (Question, error) {
	row := q.db.QueryRow(ctx, getQuestion, id)
	var i Question
	err := row.Scan(
		&i.ID,
		&i.QuestionType,
		&i.Points,
		&i.Name,
		&i.QuestionText,
		&i.CreatedAt,
	)
	return i, err
}

const listQuestions = `-- name: ListQuestions :many
SELECT id, question_type, points, name, question_text, created_at FROM question
`

func (q *Queries) ListQuestions(ctx context.Context) ([]Question, error) {
	rows, err := q.db.Query(ctx, listQuestions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Question
	for rows.Next() {
		var i Question
		if err := rows.Scan(
			&i.ID,
			&i.QuestionType,
			&i.Points,
			&i.Name,
			&i.QuestionText,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listQuestionsByQuestionType = `-- name: ListQuestionsByQuestionType :many
SELECT id, question_type, points, name, question_text, created_at FROM question 
WHERE question_type = $1
`

func (q *Queries) ListQuestionsByQuestionType(ctx context.Context, questionType pgtype.UUID) ([]Question, error) {
	rows, err := q.db.Query(ctx, listQuestionsByQuestionType, questionType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Question
	for rows.Next() {
		var i Question
		if err := rows.Scan(
			&i.ID,
			&i.QuestionType,
			&i.Points,
			&i.Name,
			&i.QuestionText,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateQuestion = `-- name: UpdateQuestion :one
UPDATE question SET 
  question_type = $1, points = $2, name = $3
WHERE id = $4
RETURNING id, question_type, points, name, question_text, created_at
`

type UpdateQuestionParams struct {
	QuestionType pgtype.UUID
	Points       int32
	Name         string
	ID           pgtype.UUID
}

func (q *Queries) UpdateQuestion(ctx context.Context, arg UpdateQuestionParams) (Question, error) {
	row := q.db.QueryRow(ctx, updateQuestion,
		arg.QuestionType,
		arg.Points,
		arg.Name,
		arg.ID,
	)
	var i Question
	err := row.Scan(
		&i.ID,
		&i.QuestionType,
		&i.Points,
		&i.Name,
		&i.QuestionText,
		&i.CreatedAt,
	)
	return i, err
}
